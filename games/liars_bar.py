from aiogram import F, Router
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
import random
import config
import time
from collections import Counter

router = Router()

# –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥—Ä–æ–π –±–∞—Ä –ª–∂–µ—Ü–æ–≤
async def start_message(message: Message, chat_id):
    config.current_game[chat_id] = "liars_bar" # —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É
    end_game_button = InlineKeyboardButton(text='üíî –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É üíî', callback_data='end_game')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[end_game_button]])
    await message.answer("–í—ã –∏–≥—Ä–∞–µ—Ç–µ Liar's Bar", reply_markup=keyboard)

@router.callback_query(F.data == "liars_bar")
async def liars_bar_handler(callback: CallbackQuery):
    chat_id = callback.message.chat.id

    config.current_game[chat_id] = "liars_bar"
    participate_button = InlineKeyboardButton(text="–£—á–∞—Å—Ç–≤—É—é", callback_data="participate")
    start_game_kto_ya_button = InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="start_liars_bar")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[participate_button], [start_game_kto_ya_button]])

    await callback.message.edit_text("–≤—ã–±—Ä–∞–Ω–∞ –∏–≥—Ä–∞ Liar's Bar", reply_markup=keyboard)
    print(f"—á–∞—Ç {callback.message.chat.title} –Ω–∞—á–∞–ª –∏–≥—Ä—É Liar's Bar")

# —Å—Ç–∞—Ä—Ç –∏–≥—Ä—ã // —Ä–∞–∑—Ä–∞—á–∞ –∫–∞—Ä—Ç –∏–≥—Ä–æ–∫–∞–º
@router.callback_query(F.data == "start_liars_bar")
async def start_liars_bar_handler(callback: CallbackQuery):
    await start_liars_bar_game(callback.message) # —Ä–∞–∑–¥–∞—á–∞ –∫–∞—Ä—Ç
    await callback.message.bot.delete_message(callback.message.chat.id, callback.message.message_id)

# —Ä–∞–∑–¥–∞—á–∞ –∫–∞—Ä—Ç
async def start_liars_bar_game(message):
    chat_id = message.chat.id
    random.seed(time.time())  # –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–∏–¥ –∫–∞–∂–¥—ã–π —Ä–∞–∑ –¥–ª—è –ª—É—á—à–µ–π —Ä–∞–Ω–¥–æ–º–Ω–æ—Å—Ç–∏

    config.cards[chat_id] = {"ace": 6, "king": 6, "queen": 6, "joker": 2, "devil": 2} # –æ–±—â–∞—è –∫–æ–ª–æ–¥–∞ –∫–∞—Ä—Ç

    if len(config.participants[chat_id]) <= 4: # –≤ –±–∞—Ä –ª–∂–µ—Ü–æ–≤ –º–æ–≥—É—Ç –∏–≥—Ä–∞—Ç—å –º–∞–∫—Å–∏–º—É–º 4 –∏–≥—Ä–æ–∫–∞
        for player, data in config.participants[chat_id].items():
            while sum(data["cards"].values()) != 5: # –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –¥–∞–≤–∞—Ç—å –∏–≥—Ä–æ–∫—É –∫–∞—Ä—Ç—ã –ø–æ–∫–∞ –Ω–µ –Ω–∞–±–µ—Ä–µ—Ç—Å—è 5
                random_card = random.choice(list(config.cards[chat_id].keys())) # –≤—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç—ã
                if config.cards[chat_id][random_card] != 0: # –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ —Ç–∞–∫–∏–µ –∫–∞—Ä—Ç—ã
                    config.cards[chat_id][random_card] -= 1 # –∑–∞–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—É –∏–∑ –æ–±—â–µ–π –∫–æ–ª–æ–¥—ã
                    data["cards"].setdefault(random_card, 0) # —Å–æ–∑–¥–∞—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
                    data["cards"][random_card] += 1 # –¥–∞—Ç—å –∫–∞—Ä—Ç—É –∏–≥—Ä–æ–∫—É
                else:
                    config.cards[chat_id].pop(random_card, None) # —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á –∫–∞—Ä—Ç—ã –∏–∑ –æ–±—â–µ–π –∫–æ–ª–æ–¥—ã –µ—Å–ª–∏ —ç—Ç–∏—Ö –∫–∞—Ä—Ç –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å

            await message.bot.send_message(data["id"], '—Ç–≤–æ–∏ –∫–∞—Ä—Ç—ã\n"–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã" - "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"')

            for card, number in data["cards"].items():
                await message.bot.send_message(data["id"], f'{card} - {number}')

            await message.bot.send_message(chat_id, f'üåü {config.href(player, data["full_name"])} –ø–æ–ª—É—á–∏–ª —Å–≤–æ–∏ –∫–∞—Ä—Ç—ã üåü',
                                            parse_mode="HTML", disable_web_page_preview=True)

        config.trump_card[chat_id] = [random.choice(["ace", "king", "queen"])] # –≤—ã–±–æ—Ä –∫–æ–∑—ã—Ä—è
        config.cards[chat_id] = {}  # –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –∫–æ–ª–æ–¥—É –∫–∞—Ä—Ç, —Å–æ–∑–¥–∞–≤ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
        await message.answer(f'–∫–æ–∑—ã—Ä—å <b>{config.trump_card[chat_id][0]}</b>', parse_mode="HTML")

# –∏–≥—Ä–æ–∫ –≤—ã–±–∏—Ä–∞–µ—Ç –∫–∞–∫–∏–µ –∫–∞—Ä—Ç—ã –∫–∏–Ω—É—Ç—å
async def send_word_func(message, group_chat_id, user, full_name):
    # —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª –∏–≥—Ä–æ–∫ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞ "–∫–∞—Ä—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
    send_cards = [w.lower().strip() for w in message.text.split(maxsplit=1)[1].split(',')]
    temp_cards = {} # –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –∫–∞—Ä—Ç, –≤ —Å–ª—É—á–∞–µ —á–µ–≥–æ –æ–Ω–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∫ –æ–±—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–∞—Ä—Ç –Ω–∞ —Å—Ç–æ–ª–µ
    user_cards = config.participants[group_chat_id][user.username]["cards"] # –∫–∞—Ä—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å —É –∏–≥—Ä–æ–∫–∞

    if any(card.startswith("devil") for card in send_cards): # –≤—ã–±—Ä–∞–ª –ª–∏ –∏–≥—Ä–æ–∫ –∫–∞—Ä—Ç—É –¥—å—è–≤–æ–ª–∞
        if len(send_cards) > 1 or "devil" not in user_cards.keys(): # —Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª –∏–≥—Ä–æ–∫ –∏ –µ—Å—Ç—å –ª–∏ –∫–∞—Ä—Ç–∞ –¥—å—è–≤–æ–ª–∞ —É –∏–≥—Ä–æ–∫–∞
            await message.answer('—Ç—ã –Ω–µ –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å —ç—Ç–∏ –∫–∞—Ä—Ç—ã')
            return

    for card in send_cards:
        try:
            card_name = card.split(maxsplit=1)[0] # –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
            cards_number = int(card.split(maxsplit=1)[1]) # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç
            # –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∞—è –∫–∞—Ä—Ç–∞ —É –∏–≥—Ä–æ–∫–∞ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –≤–≤–µ–ª –∏–≥—Ä–æ–∫
            if card_name in user_cards.keys() and cards_number <= user_cards[card_name]:
                if "devil" in card_name and cards_number > 1: # –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ª–∏ –∫–æ–ª-–≤–æ –∫–∞—Ä—Ç –¥—å—è–≤–æ–ª–∞ –≤—ã–±—Ä–∞–ª –∏–≥—Ä–æ–∫
                    await message.answer('—Ç—ã –Ω–µ –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å —ç—Ç–∏ –∫–∞—Ä—Ç—ã')
                    return
                else:
                    temp_cards[card_name] = cards_number
            else:
                return # –ø—Ä–µ—Ä–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞, —á—Ç–æ–±—ã –Ω–µ –∑–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –∏–∑-–∑–∞ –æ–ø–µ—á–∞—Ç–∫–∏
        except:
            await message.answer('—á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')

    if temp_cards and sum(temp_cards.values()) <= 3:
        await message.answer(f'—Ç—ã –≤—ã–±–∏—Ä–∞–µ—à—å –∫–∞—Ä—Ç—ã:\n{", ".join(f"{card} - {cards_number}" for card, cards_number in temp_cards.items())}')
        await message.bot.send_message(group_chat_id,
            f'{config.href(user.username, full_name)} –≤—ã–ª–æ–∂–∏–ª {sum(temp_cards.values())} {config.trump_card[group_chat_id][0]}',
            parse_mode="HTML", disable_web_page_preview=True)

        # –≤—ã—á–∏—Ç–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã —É –∏–≥—Ä–æ–∫–∞
        config.participants[group_chat_id][user.username]["cards"] = dict(Counter(user_cards) - Counter(temp_cards))
        user_cards = config.participants[group_chat_id][user.username]["cards"]
        await message.answer(
            f'–æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–∞—Ä—Ç—ã:\n{", ".join(f"{card} - {cards_number}" for card, cards_number in user_cards.items())}')

        temp_cards["full_name"] = user.full_name # –ø–æ–ª–Ω–æ–µ –∏–º—è, —á—Ç–æ–±—ã –±—ã–ª–æ –ª–µ–≥—á–µ –∫ –Ω–µ–º—É –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è
        config.cards[group_chat_id] = {user.username: temp_cards}  # –æ–±—â–∞—è –∫–æ–ª–æ–¥–∞ –∫–∞—Ä—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

        # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É —Å —Ä–µ—à–µ–Ω–∏–µ–º –≤–µ—Ä–∏—Ç—å –∏–≥—Ä–æ–∫—É –∏–ª–∏ –Ω–µ—Ç
        trust_button = InlineKeyboardButton(text="–Ω–µ –≤–µ—Ä—é", callback_data="not_trust_button_pressed")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[trust_button]])
        await message.bot.send_message(group_chat_id, '–≤–µ—Ä–∏—Ç—å –∏–ª–∏ –Ω–µ—Ç?', reply_markup=keyboard)



# JoJo reference
async def jojo_reference(message):
    user_text = message.text.lower()

    if user_text.lower() == "—Å—Ç–æ—è—Ç—å, —è –≤—Å–µ –µ—â–µ –º–æ–≥—É –ø–æ–¥–Ω–∏–º–∞—Ç—å —Å—Ç–∞–≤–∫—É!":
        await message.answer_animation('https://i.gifer.com/Oq7.gif', caption='R-R-R-R-R-R-R-R-RAISE? –¢–ï–ë–ï –ë–û–õ–¨–®–ï –ù–ï–ß–ï–ì–û –°–¢–ê–í–ò–¢–¨!')



@router.callback_query(F.data == "not_trust_button_pressed")
# üí• —è —Ç–µ–±–µ –Ω–µ –≤–µ—Ä—é! —Ç—ã –Ω–µ—Å–µ—à—å —Ö#–π–Ω—é!
async def liar(callback: CallbackQuery):
    message = callback.message
    group_chat_id = callback.message.chat.id
    user = callback.from_user

    # –∏–º—è –∏ –ø–æ–ª–Ω–æ–µ –∏–º—è –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç—è—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
    name_for_check, data_check = next(iter(config.cards[group_chat_id].items()))

    await message.answer(f'{config.href(user.username, user.full_name)} —Ö–æ—á–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–≥—Ä–æ–∫–∞ '
                         f'{config.href(name_for_check, data_check["full_name"])}',
                            parse_mode="HTML", disable_web_page_preview=True)

    if "devil" in data_check.keys(): # –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –≤—ã–±—Ä–∞–ª –∫–∞—Ä—Ç—É –¥—å—è–≤–æ–ª–∞
        await message.answer(f'{config.href(name_for_check, data_check["full_name"])} –∫–∏–Ω—É–ª –∫–∞—Ä—Ç—É –¥—å—è–≤–æ–ª–∞\n'
                             '–≤—Å–µ –∏–≥—Ä–æ–∫–∏ –¥–æ–ª–∂–Ω—ã —Å—ã–≥—Ä–∞—Ç—å –≤ —Ä—É—Å—Å–∫—É—é —Ä—É–ª–µ—Ç–∫—É', parse_mode="HTML", disable_web_page_preview=True)

        # –Ω—É–∂–Ω–æ –æ–±–µ—Ä–Ω—É—Ç—å participants –≤ list(), –ø–æ—Ç–æ–º—É —á—Ç–æ participants –±—É–¥–µ—Ç –º–µ–Ω—è—Ç—å—Å—è –≤–æ –≤—Ä–µ–º—è –∏—Ç–µ—Ä–∞—Ü–∏–∏
        for player, data in list(config.participants[group_chat_id].items()): # —Ä—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞
            if player != name_for_check:
                await revolver_func(message, player, group_chat_id) # —Ä—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞
        await start_liars_bar_game(message)  # —Ä–∞–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞–º
        config.cards[group_chat_id] = {}  # –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –∫–æ–ª–æ–¥—É –∫–∞—Ä—Ç, —Å–æ–∑–¥–∞–≤ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
        return

    # –≤ —ç—Ç—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –∫–∞—Ä—Ç—ã –Ω–µ —è–≤–ª—è—é—â–∏–µ—Å—è –∫–æ–∑—ã—Ä–µ–º
    extra_cards = list(set(config.cards[group_chat_id][name_for_check].keys()) - set(config.trump_card[group_chat_id]))
    extra_cards.remove("full_name") # —ç—Ç–æ—Ç –∫–ª—é—á –Ω—É–∂–µ–Ω –±—ã–ª –¥–ª—è –ª–µ–≥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª–Ω–æ–º—É –∏–º–µ–Ω–∏ –ø–æ–¥—Å—É–¥–∏–º–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    if len(extra_cards) == 1 and "joker" in extra_cards: # –æ—Ç–ø—Ä–∞–≤–∏–ª –ª–∏ –ø–æ–¥—Å—É–¥–∏–º—ã–π –¥–∂–æ–∫–µ—Ä–∞
        await message.answer(f'{config.href(name_for_check, data_check["full_name"])} –≤—ã–ª–æ–∂–∏–ª –∫–∞—Ä—Ç—É –¥–∂–æ–∫–µ—Ä–∞\n'
                             f'{config.href(user.username, user.full_name)} –¥–æ–ª–∂–µ–Ω —Å—ã–≥—Ä–∞—Ç—å –≤ —Ä—É—Å—Å–∫—É—é —Ä—É–ª–µ—Ç–∫—É',
                             parse_mode="HTML", disable_web_page_preview=True)

        await revolver_func(message, user.username, group_chat_id) # —Ä—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞
        await start_liars_bar_game(message)  # —Ä–∞–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞–º
        config.cards[group_chat_id] = {}  # –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –∫–æ–ª–æ–¥—É –∫–∞—Ä—Ç, —Å–æ–∑–¥–∞–≤ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
        return

    if extra_cards: # –ø–æ–¥—Å—É–¥–∏–º—ã–π –∫—É—Ä—Ç –∫–æ–±–µ–π–Ω–∏—Ç—Å—è
        for extra_card in extra_cards:
            await message.answer(f'{config.href(name_for_check, data_check["full_name"])} –≤—ã–ª–æ–∂–∏–ª –∫–∞—Ä—Ç—É:\n'
                                 f'{extra_card}\n\n{config.href(name_for_check, data_check["full_name"])} –¥–æ–ª–∂–µ–Ω —Å–¥–µ–ª–∞—Ç—å –≤—ã—Å—Ç—Ä–µ–ª',
                                 parse_mode="HTML", disable_web_page_preview=True)

        await revolver_func(message, name_for_check, group_chat_id) # —Ä—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞
        await start_liars_bar_game(message)  # —Ä–∞–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞–º
        config.cards[group_chat_id] = {}  # –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –∫–æ–ª–æ–¥—É –∫–∞—Ä—Ç, —Å–æ–∑–¥–∞–≤ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
    else: # –Ω–µ–≤–µ—Ä—É—é—â–∏–π –∫—É—Ä—Ç –∫–æ–±–µ–π–Ω–∏—Ç—Å—è
        await message.answer(f'{config.href(name_for_check, data_check["full_name"])} –≤—ã–±—Ä–∞–ª –∫–∞—Ä—Ç—É: '
                             f'{config.trump_card[group_chat_id][0]}\n{config.href(user.username, user.full_name)}'
                             f' –¥–æ–ª–∂–µ–Ω –∑–∞—Å—É–Ω—É—Ç—å —Ä–µ–≤–æ–ª—å–≤–µ—Ä –≤ —Ä–æ—Ç', parse_mode="HTML", disable_web_page_preview=True)

        await revolver_func(message, user.username, group_chat_id)  # —Ä—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞
        await start_liars_bar_game(message)  # —Ä–∞–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞–º
        config.cards[group_chat_id] = {}  # –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –∫–æ–ª–æ–¥—É –∫–∞—Ä—Ç, —Å–æ–∑–¥–∞–≤ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å

    await message.bot.delete_message(group_chat_id, message.message_id)



# —Ä—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞
async def revolver_func(message, player_name, chat_id):
    player_shots = config.participants[chat_id][player_name]["shots"]
    shot = random.choice(player_shots) # –≤—ã—Å—Ç—Ä–µ–ª
    player_full_name = config.participants[chat_id][player_name]["full_name"]
    random.seed(time.time())  # –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–∏–¥ –∫–∞–∂–¥—ã–π —Ä–∞–∑ –¥–ª—è –ª—É—á—à–µ–π —Ä–∞–Ω–¥–æ–º–Ω–æ—Å—Ç–∏

    if shot == 1:
        await message.answer(f'–∏–≥—Ä–æ–∫ {config.href(player_name, player_full_name)} –ø–æ–º–µ—Ä üî´\n'
                             '–æ–Ω –≤—ã–±—ã–≤–∞–µ—Ç –∏–∑ –∏–≥—Ä—ã', parse_mode="HTML",
                             disable_web_page_preview=True)

        # —É–¥–∞–ª–∏—Ç—å –≤—ã–±—ã–≤—à–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
        config.participants[chat_id].pop(player_name, None)
        config.user_ids[chat_id].pop(player_name, None)

        if len(config.participants[chat_id]) == 1: # –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
            for player, data in config.participants[chat_id].items():
                await message.answer(f'{config.href(player, data["full_name"])} –ø–æ–±–µ–∂–¥–∞–µ—Ç',
                                     parse_mode="HTML", disable_web_page_preview=True)
            await config.end_game_func(message, chat_id)
            return
    else:
        player_shots.remove(shot)
        await message.answer(f'{config.href(player_name, player_full_name)} –≤—ã–∂–∏–ª üò©\n'
                             f'–ø–∞—Ç—Ä–æ–Ω–æ–≤ –≤ —Ä–µ–≤–æ–ª—å–≤–µ—Ä–µ –æ—Å—Ç–∞–ª–æ—Å—å: {len(player_shots)}',
                             parse_mode="HTML", disable_web_page_preview=True)

    for player, data in config.participants[chat_id].items():  # –æ—á–∏—Å—Ç–∏—Ç—å –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–æ–≤, —á—Ç–æ–±—ã —Ä–∞–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ
        data["cards"] = {}

# –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∞–≤–∏–ª –∏–≥—Ä—ã
async def send_rules(message):
    await message.answer(config.games['–ë–∞—Ä –õ–∂–µ—Ü–æ–≤'], parse_mode="HTML")