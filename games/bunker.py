from aiogram import F, Router
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
import random
import config
import time
import asyncio

random.seed(time.time())

router = Router()

# –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–Ω–∫–µ—Ä–æ–º
async def start_message(message: Message, chat_id):
    btn = [[InlineKeyboardButton(text='üíî –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É üíî', callback_data='end_game')]] # –∫–Ω–æ–ø–∫–∏, –ø–æ–∫–∞ —Ç—É—Ç —Ç–æ–ª—å–∫–æ "–∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É"
    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –ª–æ–∫–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–∞
    btn.insert(0, [InlineKeyboardButton(text='–ì–æ–ª–æ—Å–æ–≤–∞—Ç—å', callback_data='vote')] if config.location[chat_id] else [])

    keyboard = InlineKeyboardMarkup(inline_keyboard=btn)
    await message.answer('–í—ã –∏–≥—Ä–∞–µ—Ç–µ "–ë—É–Ω–∫–µ—Ä"', reply_markup=keyboard)

# –ø—Ä–æ—à–ª—ã–π –º–µ—Ç–æ–¥ –±—ã–ª –Ω–∞ 82 —Å—Ç—Ä–æ–∫–∏ –∫–æ–¥–∞ –≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç 16 —Ç–µ–∫—É—â–∏—Ö...
async def send_word_func(message: Message, chat_id, username, full_name):
    send_word_list = [word.strip().lower() for word in message.text.split(maxsplit=1)[1].split(",")]
    for card in send_word_list:
        # –ø–æ–¥–µ–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É –∫–∞—Ä—Ç—ã –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
        card_name = card.split(maxsplit=1)[0] # –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
        card_data = card.split(maxsplit=1)[1] # –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
        config.who_list[chat_id].setdefault(card_name, {})  # —Å–æ–∑–¥–∞—Ç—å –∫–ª—é—á –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã –µ—Å–ª–∏ –µ–≥–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if card_data in config.who_list[chat_id][card_name].keys():  # —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∫–∞—Ä—Ç–∞ –∏–ª–∏ –Ω–µ—Ç
            await message.answer(f'{card_name} - {card_data}\n\n—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –∫–∞—Ä—Ç, –æ—Ç–ø—Ä–∞–≤—å —á—Ç–æ –Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ')
            return
        else:
            config.who_list[chat_id][card_name][card_data] = username
            await message.answer(f'–≤–Ω–µ—Å–µ–Ω–æ\n{card_name}: {card_data}')
            print(f'{full_name}\n{card_name} - {card_data}\n')

    await message.bot.send_message(chat_id, f'üåü {config.href(username, full_name)} –¥–æ–±–∞–≤–∏–ª –∫–∞—Ä—Ç—ã üåü', parse_mode="HTML",
                                                                                                disable_web_page_preview=True)

# —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@router.callback_query(F.data == "bunker")
async def bunker_handler(callback: CallbackQuery):
    chat_id = callback.message.chat.id

    config.current_game[chat_id] = "bunker"
    participate_button = InlineKeyboardButton(text="–£—á–∞—Å—Ç–≤—É—é", callback_data="participate")
    start_game_bunker_button = InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="start_bunker")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[participate_button], [start_game_bunker_button]])

    await callback.message.edit_text('–í—ã–±—Ä–∞–Ω–∞ –∏–≥—Ä–∞ "–ë—É–Ω–∫–µ—Ä"\n\n—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞–¥–µ–∫–≤–∞—Ç–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏,'
                                     ' —á—Ç–æ–±—ã –Ω–µ —É—Å–ª–æ–∂–Ω—è—Ç—å –∂–∏–∑–Ω—å –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º', reply_markup=keyboard)
    print(f'—á–∞—Ç {callback.message.chat.title} –Ω–∞—á–∞–ª –∏–≥—Ä—É "–ë—É–Ω–∫–µ—Ä"')

# —Å—Ç–∞—Ä—Ç –∏–≥—Ä—ã
@router.callback_query(F.data == "start_bunker")
async def start_bunker_handler(callback: CallbackQuery):
    chat_id = callback.message.chat.id

    if len(config.participants[chat_id]) >= 2: # –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –∏–≥—Ä–æ–∫–æ–≤
        for player in config.participants[chat_id]:
            for card, value in config.who_list[chat_id].items(): # –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –∏ —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π –æ—Ç –∏–≥—Ä–æ–∫–æ–≤
                if player not in value.values():  # –≤—Å–µ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–ª–æ–≤–∞
                    await callback.bot.send_message(
                        chat_id,
                        text=f'–∫–∞–∂–¥—ã–π –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—ã, '
                             f'<a href="https://t.me/{player}">{config.participants[chat_id][player]["full_name"]}</a>, –æ—Ç–ø—Ä–∞–≤–ª—è–π üî´',
                        parse_mode="HTML",
                        disable_web_page_preview=True
                    )
                    return

        for player in config.participants[chat_id]:
            for card, value in config.who_list[chat_id].items():  # –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –∏ —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π –æ—Ç –∏–≥—Ä–æ–∫–æ–≤
                # –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫—É
                random_card = random.choice(list(value.keys()))
                config.participants[chat_id][player]['bunker_cards'][f'{card}'] = random_card
                config.who_list[chat_id][card].pop(random_card, None) # —É–¥–∞–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç

        # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞–º –∏—Ö –∫–∞—Ä—Ç—ã
        for username, user_id in config.user_ids[chat_id].items():
            message_for_send = 'üåü –≤–æ—Ç —Ç–≤–æ–∏ –∫–∞—Ä—Ç—ã\n\n'
            for card, value in config.participants[chat_id][username]["cards"].items():
                message_for_send += f'{card}: {value}\n//////////////////\n'
                print(f'{config.participants[chat_id][username]["full_name"]}\n{card}: {value}\n')
            await callback.bot.send_message(user_id, message_for_send)

        await callback.message.answer('–∏–≥—Ä–∞ "–ë—É–Ω–∫–µ—Ä" –Ω–∞—á–∞–ª–∞—Å—å')
        config.location[chat_id] = 'bunker' # –∫–æ—Å—Ç—ã–ª—å, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ "–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ" –ø–æ—è–≤–∏–ª–∞—Å—å
    else:
        await callback.bot.send_message(chat_id, text="–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤")


# –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∞–≤–∏–ª –∏–≥—Ä—ã
async def send_rules(message):
    await message.answer(config.games['–ë—É–Ω–∫–µ—Ä'])

# –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
async def vote_func(callback, chat_id):
    config.players[chat_id] = {}  # —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ —Å –∏–º–µ–Ω–∞–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    for user_name, user_id in config.user_ids[chat_id].items():
        config.players[chat_id][user_name] = []  # —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ —Å –∏–º–µ–Ω–∞–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        # –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å–≤–æ—è –∫–æ–ø–∏—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        config.players[chat_id][user_name] = [
            # –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ –ø–æ–ª–Ω—ã–µ –∏–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–æ–≤
            InlineKeyboardButton(text=f'{user_data["full_name"]}', callback_data=f'{user_data["name"]}_vote')
            for user_data in config.participants[chat_id].values()
            if user_data["name"] != user_name]  # –Ω–µ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ —Å–ø–∏—Å–æ–∫ —Å–∞–º–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[button] for button in config.players[chat_id][user_name]])
        await callback.bot.send_message(user_id, '–∫–æ–≥–æ –≤—ã–≥–æ–Ω—è–µ–º?', reply_markup=keyboard)
    await callback.message.answer('–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–∞–º –≤ –ª—Å')
    await callback.bot.delete_message(chat_id, callback.message.message_id)
    await asyncio.sleep(30)  # —Ç–∞–π–º–µ—Ä, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
    await bunker_vote(chat_id, callback.message)  # –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–µ–π –≤—ã–±—ã–≤—à–µ–≥–æ –∏–≥—Ä–æ–∫–∞
    await callback.message.answer('–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ')

async def vote_for_handler(callback, group_chat_id, user): # user —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –≥–æ–ª–æ—Å—É–µ—Ç
    voted_username = callback.data.replace('_vote', '')  # –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∏–∫–∞ –∏–∑ –∫–æ–ª–ª–±—ç–∫–∞, —ç—Ç–æ –∏–≥—Ä–æ–∫ –∑–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –≥–æ–ª–æ—Å—É—é—Ç
    voted_full_name = config.participants[group_chat_id][voted_username]["full_name"]

    config.participants[group_chat_id][voted_username]["voted_people"].append(user.username)

    await callback.message.answer(f'—Ç—ã –≥–æ–ª–æ—Å—É–µ—à—å –∑–∞ {config.href(voted_username, voted_full_name)}',
                                  parse_mode="HTML", disable_web_page_preview=True)

    await callback.bot.send_message(group_chat_id,
        f'üî´ {config.href(user.username, user.full_name)} –≥–æ–ª–æ—Å—É–µ—Ç –∑–∞ {config.href(voted_username, voted_full_name)}',
        parse_mode="HTML", disable_web_page_preview=True)
    await callback.bot.delete_message(callback.message.chat.id, callback.message.message_id)

# –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±—ã–≤—à–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ –±—É–Ω–∫–µ—Ä–µ
async def bunker_vote(chat_id, message):
    highest_vote = random.choice(list(config.participants[chat_id].keys())) # –∏–≥—Ä–æ–∫ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤
    vote_counter = []  # —Å—É–º–º—ã –≥–æ–ª–æ—Å–æ–≤ –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    for player, values in config.participants[chat_id].items():
        vote_counter.append(len(values["voted_people"]))
        if len(values["voted_people"]) > len(config.participants[chat_id][highest_vote]["voted_people"]):
            highest_vote = player

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –≤ vote_counter, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ä–∞–∑–æ—à–ª–∏—Å—å –ª–∏ –º–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤
    if vote_counter.count(len(config.participants[chat_id][highest_vote]["voted_people"])) > 1:
        await message.bot.send_message(chat_id, f'–º–Ω–µ–Ω–∏—è —Ä–∞–∑–æ—à–ª–∏—Å—å')
    else:
        highest_vote_full_name = config.participants[chat_id][highest_vote]["full_name"] # –ø–æ–ª–Ω–æ–µ –∏–º—è –≤—ã–±—ã–≤—à–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        await message.bot.send_message(chat_id, f'{config.href(highest_vote, highest_vote_full_name)} –≤—ã–±—ã–≤–∞–µ—Ç',
            parse_mode="HTML", disable_web_page_preview=True)

        config.participants[chat_id].pop(highest_vote, None) # —É–¥–∞–ª–∏—Ç—å –≤—ã–±—ã–≤—à–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
        config.user_ids[chat_id].pop(highest_vote, None)

        if len(config.participants[chat_id]) <= 2: # —Å–∫–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É
            await message.bot.send_message(chat_id, '–≤ –±—É–Ω–∫–µ—Ä –ø—Ä–æ—Ö–æ–¥—è—Ç:')
            print('–≤ –±—É–Ω–∫–µ—Ä –ø—Ä–æ—Ö–æ–¥—è—Ç:')
            for player, data in config.participants[chat_id].items():
                player_full_name = data["full_name"]
                await message.bot.send_message(chat_id, config.href(player, player_full_name), parse_mode="HTML", disable_web_page_preview=True)
                print(player_full_name)
            await config.end_game_func(message, chat_id)