from aiogram import F, Router
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
import random
import config
import time

router = Router()

# –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥—Ä–æ–π –∫—Ç–æ —è
async def start_message(message: Message, chat_id):
    config.current_game[chat_id] = "kto_ya" # —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É
    end_game_button = InlineKeyboardButton(text='üíî –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É üíî', callback_data='end_game')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[end_game_button]])
    await message.answer('–í—ã –∏–≥—Ä–∞–µ—Ç–µ "–ö—Ç–æ –Ø"', reply_markup=keyboard)

@router.callback_query(F.data == "kto_ya")
async def kto_ya_handler(callback: CallbackQuery):
    chat_id = callback.message.chat.id

    config.current_game[chat_id] = "kto_ya"
    participate_button = InlineKeyboardButton(text="–£—á–∞—Å—Ç–≤—É—é", callback_data="participate")
    start_game_kto_ya_button = InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="start_game_kto_ya")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[participate_button], [start_game_kto_ya_button]])

    await callback.message.edit_text('–í—ã–±—Ä–∞–Ω–∞ –∏–≥—Ä–∞ "–ö—Ç–æ –Ø"', reply_markup=keyboard)
    print(f'—á–∞—Ç {callback.message.chat.title} –Ω–∞—á–∞–ª –∏–≥—Ä—É "–ö—Ç–æ –Ø"')

# —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@router.callback_query(F.data == "start_game_kto_ya")
async def start_game_kto_ya_handler(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    message_id = callback.message.message_id
    random.seed(time.time()) # –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–∏–¥ –∫–∞–∂–¥—ã–π —Ä–∞–∑ –¥–ª—è –ª—É—á—à–µ–π —Ä–∞–Ω–¥–æ–º–Ω–æ—Å—Ç–∏

    if len(config.participants[chat_id]) >= 2: # –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –∏–≥—Ä–æ–∫–æ–≤
        # —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ —Å–ø–∏—Å–æ–∫ participants —Å who_list, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –≤—Å–µ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–ª–æ–≤–∞
        # –¥–∞–ª–µ–µ –æ–±–µ—Ä–Ω—É—Ç—å missing –≤ —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã —É–≤–µ–¥–æ–º–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –∫—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª
        missing = list(set(config.participants[chat_id].keys()) - set(config.who_list[chat_id].values()))
        if missing:
            for player in missing:
                await callback.bot.send_message(chat_id, text='—Ç–∞–º –±–∞–≥, –∫–æ—Ç–æ—Ä—ã–π –º–Ω–µ –ª–µ–Ω—å —Ñ–∏–∫—Å–∏—Ç—å, '
                    f'{config.href(player, config.participants[chat_id][player]["full_name"])}, –æ—Ç–ø—Ä–∞–≤—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–ª–æ–≤–æ üî´',
                    parse_mode="HTML", disable_web_page_preview=True)
            return

        # –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ —Å–ª–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
        for player, data in config.participants[chat_id].items():
            while data['word'] == "": # –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –≤—ã–±–∏—Ä–∞—Ç—å —Å–ª–æ–≤–∞
                random_word = random.choice(list(config.who_list[chat_id].keys())) # –≤—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–ª–æ–≤–∞
                if config.who_list[chat_id][random_word] != player: # –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ —Å–ª–æ–≤–∞, –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–µ –∏–≥—Ä–æ–∫–æ–º
                    data["word"] = random_word
                    await callback.bot.send_message(chat_id, text=f'{config.href(player, data["full_name"])} –ø–æ–ª—É—á–∏–ª —Å–≤–æ–µ —Å–ª–æ–≤–æ',
                        parse_mode="HTML", disable_web_page_preview=True)
                    print(f'{player} - {random_word}')

        # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
        for user_id in config.user_ids[chat_id].values():
            message = 'üåü –í–æ—Ç —Å–ª–æ–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n'
            for player, data in config.participants[chat_id].items():
                if user_id != data["id"]:
                    message += f'{config.href(player, data["full_name"])} - {data["word"]}\n'
            await callback.bot.send_message(user_id, text=f"{message}", parse_mode="HTML", disable_web_page_preview=True)
        await callback.bot.delete_message(chat_id, message_id)
    else:
        await callback.bot.send_message(chat_id, text="–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤")

# –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∞–≤–∏–ª –∏–≥—Ä—ã
async def send_rules(message):
    await message.answer(config.games['–ö—Ç–æ –Ø'])

# –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞
async def send_word_func(message: Message, chat_id, username, full_name):
    # –æ–¥–∏–Ω —Ä–∞–∑ –æ—Ç–¥–µ–ª–∏—Ç—å /sendword –æ—Ç —Å–ª–æ–≤ –∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    send_word_list = [word.strip() for word in message.text.split(maxsplit=1)[1].split(",")]
    common_words = list(set(send_word_list) & set(config.who_list[chat_id].keys()))  # –µ—Å—Ç—å –ª–∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞
    if not common_words:
        for word in send_word_list:
            # –∫–ª—é—á —ç—Ç–æ —Å–ª–æ–≤–æ, –∞ –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø–æ—Ç–æ–º—É —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø–æ–∑–∂–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Å–ª–æ–≤
            config.who_list[chat_id][word] = username  # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤ –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤
    else:
        await message.answer(f'{common_words}\n—É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ —Å–ª–æ–≤, –æ—Ç–ø—Ä–∞–≤—å —á—Ç–æ —Ç–æ –µ—â–µ')
        return
    await message.answer("—Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω")
    await message.bot.send_message(chat_id, text=f'üåü {config.href(username, full_name)} –¥–æ–±–∞–≤–∏–ª —Å–ª–æ–≤–∞ üåü',
                           parse_mode="HTML", disable_web_page_preview=True)
    print(f"{full_name} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–ª–æ–≤–∞: {send_word_list}")